{"ast":null,"code":"import dbConnect from \"../../lib/mongo\";\nimport User from \"../../models/User\";\nimport generateToken from \"../../utils/token\";\nexport default (async (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n\n  try {\n    await dbConnect();\n    const user = await User.findOne({\n      username: username\n    });\n\n    if (user && (await user.matchPassword(password, user.password))) {\n      const payload = {\n        user: {\n          id: user._id\n        }\n      };\n      res.status(200).json({\n        _id: user.id,\n        name: user.name,\n        email: user.email,\n        phone: user.phone,\n        username: user.username,\n        isAdmin: user.isAdmin,\n        token: generateToken(payload)\n      });\n    } else {\n      throw new Error(\"Invalid Username or Password \");\n    }\n  } catch (error) {\n    throw new Error(error.message);\n  }\n});","map":{"version":3,"sources":["/home/jaybarnes/Desktop/Projects/forum/frontend/pages/api/login.ts"],"names":["dbConnect","User","generateToken","req","res","username","password","body","user","findOne","matchPassword","payload","id","_id","status","json","name","email","phone","isAdmin","token","Error","error","message"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,iBAAtB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,aAAP,MAA0B,mBAA1B;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAyBH,GAAG,CAACI,IAAnC;;AACA,MAAI;AACF,UAAMP,SAAS,EAAf;AAEA,UAAMQ,IAAI,GAAG,MAAMP,IAAI,CAACQ,OAAL,CAAa;AAAEJ,MAAAA,QAAQ,EAAEA;AAAZ,KAAb,CAAnB;;AACA,QAAIG,IAAI,KAAK,MAAMA,IAAI,CAACE,aAAL,CAAmBJ,QAAnB,EAA6BE,IAAI,CAACF,QAAlC,CAAX,CAAR,EAAiE;AAC/D,YAAMK,OAAO,GAAG;AACdH,QAAAA,IAAI,EAAE;AACJI,UAAAA,EAAE,EAAEJ,IAAI,CAACK;AADL;AADQ,OAAhB;AAKAT,MAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBF,QAAAA,GAAG,EAAEL,IAAI,CAACI,EADS;AAEnBI,QAAAA,IAAI,EAAER,IAAI,CAACQ,IAFQ;AAGnBC,QAAAA,KAAK,EAAET,IAAI,CAACS,KAHO;AAInBC,QAAAA,KAAK,EAAEV,IAAI,CAACU,KAJO;AAKnBb,QAAAA,QAAQ,EAAEG,IAAI,CAACH,QALI;AAMnBc,QAAAA,OAAO,EAAEX,IAAI,CAACW,OANK;AAOnBC,QAAAA,KAAK,EAAElB,aAAa,CAACS,OAAD;AAPD,OAArB;AASD,KAfD,MAeO;AACL,YAAM,IAAIU,KAAJ,CAAU,+BAAV,CAAN;AACD;AACF,GAtBD,CAsBE,OAAOC,KAAP,EAAc;AACd,UAAM,IAAID,KAAJ,CAAUC,KAAK,CAACC,OAAhB,CAAN;AACD;AACF,CA3BD","sourcesContent":["import dbConnect from \"../../lib/mongo\";\nimport User from \"../../models/User\";\nimport generateToken from \"../../utils/token\";\n\nexport default async (req, res) => {\n  const { username, password } = req.body;\n  try {\n    await dbConnect();\n\n    const user = await User.findOne({ username: username });\n    if (user && (await user.matchPassword(password, user.password))) {\n      const payload = {\n        user: {\n          id: user._id,\n        },\n      };\n      res.status(200).json({\n        _id: user.id,\n        name: user.name,\n        email: user.email,\n        phone: user.phone,\n        username: user.username,\n        isAdmin: user.isAdmin,\n        token: generateToken(payload),\n      });\n    } else {\n      throw new Error(\"Invalid Username or Password \");\n    }\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}