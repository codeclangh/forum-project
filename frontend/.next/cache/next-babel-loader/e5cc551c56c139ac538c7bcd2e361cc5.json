{"ast":null,"code":"import dbConnect from \"../../lib/mongo\";\nimport User from \"../../models/User\";\nimport { setTokenCookie } from \"../../utils/auth-cookie\";\nimport { generateAccessToken, generateRefreshToken } from \"../../utils/token\";\nexport default (async (req, res) => {\n  if (req.method === \"POST\") {\n    try {\n      const {\n        email,\n        password,\n        remember\n      } = req.body;\n      await dbConnect();\n      const user = await User.findOne({\n        email\n      });\n      if (!user) return res.status(400).json({\n        message: \"Email does not exist\",\n        key: \"email\"\n      });\n      if (!user.matchPassword(password)) return res.status(400).json({\n        message: \"Password is incorrect\",\n        key: \"password\"\n      });\n      const accessToken = generateAccessToken({\n        sub: user._id\n      });\n      const refreshToken = generateRefreshToken({\n        sub: user._id\n      });\n\n      if (remember) {\n        setTokenCookie(res, refreshToken);\n        res.json({\n          accessToken\n        });\n      } else {\n        res.json({\n          accessToken,\n          refreshToken\n        });\n      }\n    } catch (error) {\n      console.log(error.message);\n      res.status(500).end(\"Something went wrong\");\n    }\n  }\n});","map":{"version":3,"sources":["/home/jaybarnes/Desktop/Projects/forum/frontend/pages/api/login.ts"],"names":["dbConnect","User","setTokenCookie","generateAccessToken","generateRefreshToken","req","res","method","email","password","remember","body","user","findOne","status","json","message","key","matchPassword","accessToken","sub","_id","refreshToken","error","console","log","end"],"mappings":"AACA,OAAOA,SAAP,MAAsB,iBAAtB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,SAASC,mBAAT,EAA8BC,oBAA9B,QAA0D,mBAA1D;AAEA,gBAAe,OAAOC,GAAP,EAA4BC,GAA5B,KAAqD;AAClE,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB,QAAI;AACF,YAAM;AAAEC,QAAAA,KAAF;AAASC,QAAAA,QAAT;AAAmBC,QAAAA;AAAnB,UAAgCL,GAAG,CAACM,IAA1C;AACA,YAAMX,SAAS,EAAf;AAEA,YAAMY,IAAI,GAAG,MAAMX,IAAI,CAACY,OAAL,CAAa;AAAEL,QAAAA;AAAF,OAAb,CAAnB;AACA,UAAI,CAACI,IAAL,EACE,OAAON,GAAG,CACPQ,MADI,CACG,GADH,EAEJC,IAFI,CAEC;AAAEC,QAAAA,OAAO,EAAE,sBAAX;AAAmCC,QAAAA,GAAG,EAAE;AAAxC,OAFD,CAAP;AAIF,UAAI,CAACL,IAAI,CAACM,aAAL,CAAmBT,QAAnB,CAAL,EACE,OAAOH,GAAG,CACPQ,MADI,CACG,GADH,EAEJC,IAFI,CAEC;AAAEC,QAAAA,OAAO,EAAE,uBAAX;AAAoCC,QAAAA,GAAG,EAAE;AAAzC,OAFD,CAAP;AAIF,YAAME,WAAW,GAAGhB,mBAAmB,CAAC;AAAEiB,QAAAA,GAAG,EAAER,IAAI,CAACS;AAAZ,OAAD,CAAvC;AACA,YAAMC,YAAY,GAAGlB,oBAAoB,CAAC;AAAEgB,QAAAA,GAAG,EAAER,IAAI,CAACS;AAAZ,OAAD,CAAzC;;AAEA,UAAIX,QAAJ,EAAc;AACZR,QAAAA,cAAc,CAACI,GAAD,EAAMgB,YAAN,CAAd;AACAhB,QAAAA,GAAG,CAACS,IAAJ,CAAS;AAAEI,UAAAA;AAAF,SAAT;AACD,OAHD,MAGO;AACLb,QAAAA,GAAG,CAACS,IAAJ,CAAS;AAAEI,UAAAA,WAAF;AAAeG,UAAAA;AAAf,SAAT;AACD;AACF,KAxBD,CAwBE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACP,OAAlB;AACAV,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBY,GAAhB,CAAoB,sBAApB;AACD;AACF;AACF,CA/BD","sourcesContent":["import { NextApiRequest, NextApiResponse } from \"next\";\nimport dbConnect from \"../../lib/mongo\";\nimport User from \"../../models/User\";\nimport { setTokenCookie } from \"../../utils/auth-cookie\";\nimport { generateAccessToken, generateRefreshToken } from \"../../utils/token\";\n\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\n  if (req.method === \"POST\") {\n    try {\n      const { email, password, remember } = req.body;\n      await dbConnect();\n\n      const user = await User.findOne({ email });\n      if (!user)\n        return res\n          .status(400)\n          .json({ message: \"Email does not exist\", key: \"email\" });\n\n      if (!user.matchPassword(password))\n        return res\n          .status(400)\n          .json({ message: \"Password is incorrect\", key: \"password\" });\n\n      const accessToken = generateAccessToken({ sub: user._id });\n      const refreshToken = generateRefreshToken({ sub: user._id });\n\n      if (remember) {\n        setTokenCookie(res, refreshToken);\n        res.json({ accessToken });\n      } else {\n        res.json({ accessToken, refreshToken });\n      }\n    } catch (error) {\n      console.log(error.message);\n      res.status(500).end(\"Something went wrong\");\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}