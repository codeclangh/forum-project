{"ast":null,"code":"import axios from \"axios\";\nimport jwtDecode from \"jwt-decode\";\nimport { getAccessToken, setAccessToken } from \"../token\";\nexport const getNewToken = async () => {\n  const expiredToken = sessionStorage.getItem(\"token\");\n  console.log(expiredToken);\n  const {\n    data\n  } = await axios.post(\"/api/refresh-token\", {\n    token: expiredToken,\n    headers: {\n      withCredentials: true\n    }\n  });\n  setAccessToken(data.accessToken);\n  return data.accessToken;\n};\n\nconst makeSecuredRequest = async (url, method = \"GET\", body) => {\n  let token = getAccessToken(); // Fetch new token if token is undefined\n\n  if (!token) {\n    token = await getNewToken();\n  } else {\n    const {\n      exp\n    } = jwtDecode(token);\n\n    if (Date.now() >= exp * 1000) {\n      token = await getNewToken();\n    }\n  }\n\n  const {\n    data\n  } = await axios({\n    method,\n    data: body,\n    url,\n    headers: {\n      authorization: `Bearer ${token}`\n    }\n  });\n  return data;\n};\n\nexport default makeSecuredRequest;","map":{"version":3,"sources":["/home/jaybarnes/Desktop/Projects/forum/frontend/utils/makeSecuredRequest.ts"],"names":["axios","jwtDecode","getAccessToken","setAccessToken","getNewToken","expiredToken","sessionStorage","getItem","console","log","data","post","token","headers","withCredentials","accessToken","makeSecuredRequest","url","method","body","exp","Date","now","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAA0C,OAA1C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,UAA/C;AAEA,OAAO,MAAMC,WAAW,GAAG,YAAY;AACrC,QAAMC,YAAY,GAAGC,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAArB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAZ;AAEA,QAAM;AAAEK,IAAAA;AAAF,MAAW,MAAMV,KAAK,CAACW,IAAN,CAAW,oBAAX,EAAiC;AACtDC,IAAAA,KAAK,EAAEP,YAD+C;AAEtDQ,IAAAA,OAAO,EAAE;AACPC,MAAAA,eAAe,EAAE;AADV;AAF6C,GAAjC,CAAvB;AAOAX,EAAAA,cAAc,CAACO,IAAI,CAACK,WAAN,CAAd;AAEA,SAAOL,IAAI,CAACK,WAAZ;AACD,CAfM;;AAiBP,MAAMC,kBAAkB,GAAG,OACzBC,GADyB,EAEzBC,MAAoC,GAAG,KAFd,EAGzBC,IAHyB,KAItB;AACH,MAAIP,KAAK,GAAGV,cAAc,EAA1B,CADG,CAGH;;AACA,MAAI,CAACU,KAAL,EAAY;AACVA,IAAAA,KAAK,GAAG,MAAMR,WAAW,EAAzB;AACD,GAFD,MAEO;AACL,UAAM;AAAEgB,MAAAA;AAAF,QAAenB,SAAS,CAACW,KAAD,CAA9B;;AAEA,QAAIS,IAAI,CAACC,GAAL,MAAcF,GAAG,GAAG,IAAxB,EAA8B;AAC5BR,MAAAA,KAAK,GAAG,MAAMR,WAAW,EAAzB;AACD;AACF;;AAED,QAAM;AAAEM,IAAAA;AAAF,MAAW,MAAMV,KAAK,CAAC;AAC3BkB,IAAAA,MAD2B;AAE3BR,IAAAA,IAAI,EAAES,IAFqB;AAG3BF,IAAAA,GAH2B;AAI3BJ,IAAAA,OAAO,EAAE;AACPU,MAAAA,aAAa,EAAG,UAASX,KAAM;AADxB;AAJkB,GAAD,CAA5B;AASA,SAAOF,IAAP;AACD,CA5BD;;AA8BA,eAAeM,kBAAf","sourcesContent":["import axios, { AxiosRequestConfig } from \"axios\";\nimport jwtDecode from \"jwt-decode\";\nimport { getAccessToken, setAccessToken } from \"../token\";\n\nexport const getNewToken = async () => {\n  const expiredToken = sessionStorage.getItem(\"token\");\n\n  console.log(expiredToken);\n\n  const { data } = await axios.post(\"/api/refresh-token\", {\n    token: expiredToken,\n    headers: {\n      withCredentials: true,\n    },\n  });\n\n  setAccessToken(data.accessToken);\n\n  return data.accessToken;\n};\n\nconst makeSecuredRequest = async (\n  url: string,\n  method: AxiosRequestConfig[\"method\"] = \"GET\",\n  body?: Record<string, any>\n) => {\n  let token = getAccessToken();\n\n  // Fetch new token if token is undefined\n  if (!token) {\n    token = await getNewToken();\n  } else {\n    const { exp }: any = jwtDecode(token);\n\n    if (Date.now() >= exp * 1000) {\n      token = await getNewToken();\n    }\n  }\n\n  const { data } = await axios({\n    method,\n    data: body,\n    url,\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  });\n\n  return data;\n};\n\nexport default makeSecuredRequest;\n"]},"metadata":{},"sourceType":"module"}