{"ast":null,"code":"import mongoose from \"mongoose\";\nimport bcrypt from \"bcryptjs\";\nconst userSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true\n  },\n  username: {\n    type: String,\n    unique: true,\n    required: true\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  email: {\n    type: String,\n    unique: true,\n    required: true\n  },\n  isAdmin: {\n    type: Boolean,\n    default: false\n  },\n  isModerator: {\n    type: Boolean,\n    default: false\n  },\n  phone: {\n    type: String\n  },\n  department: {\n    type: mongoose.Schema.Types.ObjectId\n  }\n});\nuserSchema.pre(\"save\", async function (next) {\n  if (!this.isModified(\"password\")) {\n    next();\n  }\n\n  const salt = await bcrypt.genSalt(10);\n  this.password = await bcrypt.hash(this.password, salt);\n});\n\nuserSchema.methods.matchPassword = async function (enteredPassword) {\n  return await bcrypt.compare(enteredPassword, this.password);\n};\n\nconst User = mongoose.models.User || mongoose.model(\"User\", UserSchema);\nexport default User;","map":{"version":3,"sources":["/home/jaybarnes/Desktop/Projects/forum/frontend/models/User.js"],"names":["mongoose","bcrypt","userSchema","Schema","name","type","String","required","username","unique","password","email","isAdmin","Boolean","default","isModerator","phone","department","Types","ObjectId","pre","next","isModified","salt","genSalt","hash","methods","matchPassword","enteredPassword","compare","User","models","model","UserSchema"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,MAAMC,UAAU,GAAG,IAAIF,QAAQ,CAACG,MAAb,CAAoB;AACrCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAEC,MADF;AAEJC,IAAAA,QAAQ,EAAE;AAFN,GAD+B;AAKrCC,EAAAA,QAAQ,EAAE;AACRH,IAAAA,IAAI,EAAEC,MADE;AAERG,IAAAA,MAAM,EAAE,IAFA;AAGRF,IAAAA,QAAQ,EAAE;AAHF,GAL2B;AAUrCG,EAAAA,QAAQ,EAAE;AACRL,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE;AAFF,GAV2B;AAcrCI,EAAAA,KAAK,EAAE;AACLN,IAAAA,IAAI,EAAEC,MADD;AAELG,IAAAA,MAAM,EAAE,IAFH;AAGLF,IAAAA,QAAQ,EAAE;AAHL,GAd8B;AAmBrCK,EAAAA,OAAO,EAAE;AACPP,IAAAA,IAAI,EAAEQ,OADC;AAEPC,IAAAA,OAAO,EAAE;AAFF,GAnB4B;AAuBrCC,EAAAA,WAAW,EAAE;AACXV,IAAAA,IAAI,EAAEQ,OADK;AAEXC,IAAAA,OAAO,EAAE;AAFE,GAvBwB;AA2BrCE,EAAAA,KAAK,EAAE;AACLX,IAAAA,IAAI,EAAEC;AADD,GA3B8B;AA8BrCW,EAAAA,UAAU,EAAE;AACVZ,IAAAA,IAAI,EAAEL,QAAQ,CAACG,MAAT,CAAgBe,KAAhB,CAAsBC;AADlB;AA9ByB,CAApB,CAAnB;AAmCAjB,UAAU,CAACkB,GAAX,CAAe,MAAf,EAAuB,gBAAgBC,IAAhB,EAAsB;AAC3C,MAAI,CAAC,KAAKC,UAAL,CAAgB,UAAhB,CAAL,EAAkC;AAChCD,IAAAA,IAAI;AACL;;AACD,QAAME,IAAI,GAAG,MAAMtB,MAAM,CAACuB,OAAP,CAAe,EAAf,CAAnB;AACA,OAAKd,QAAL,GAAgB,MAAMT,MAAM,CAACwB,IAAP,CAAY,KAAKf,QAAjB,EAA2Ba,IAA3B,CAAtB;AACD,CAND;;AAOArB,UAAU,CAACwB,OAAX,CAAmBC,aAAnB,GAAmC,gBAAgBC,eAAhB,EAAiC;AAClE,SAAO,MAAM3B,MAAM,CAAC4B,OAAP,CAAeD,eAAf,EAAgC,KAAKlB,QAArC,CAAb;AACD,CAFD;;AAIA,MAAMoB,IAAI,GAAG9B,QAAQ,CAAC+B,MAAT,CAAgBD,IAAhB,IAAwB9B,QAAQ,CAACgC,KAAT,CAAe,MAAf,EAAuBC,UAAvB,CAArC;AACA,eAAeH,IAAf","sourcesContent":["import mongoose from \"mongoose\";\nimport bcrypt from \"bcryptjs\";\nconst userSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n  },\n  username: {\n    type: String,\n    unique: true,\n    required: true,\n  },\n  password: {\n    type: String,\n    required: true,\n  },\n  email: {\n    type: String,\n    unique: true,\n    required: true,\n  },\n  isAdmin: {\n    type: Boolean,\n    default: false,\n  },\n  isModerator: {\n    type: Boolean,\n    default: false,\n  },\n  phone: {\n    type: String,\n  },\n  department: {\n    type: mongoose.Schema.Types.ObjectId,\n  },\n});\n\nuserSchema.pre(\"save\", async function (next) {\n  if (!this.isModified(\"password\")) {\n    next();\n  }\n  const salt = await bcrypt.genSalt(10);\n  this.password = await bcrypt.hash(this.password, salt);\n});\nuserSchema.methods.matchPassword = async function (enteredPassword) {\n  return await bcrypt.compare(enteredPassword, this.password);\n};\n\nconst User = mongoose.models.User || mongoose.model(\"User\", UserSchema);\nexport default User;\n"]},"metadata":{},"sourceType":"module"}