{"ast":null,"code":"import dbConnect from \"../../lib/mongo\";\nimport User from \"../../models/User\";\nimport { setTokenCookie } from \"../../utils/auth-cookie\";\nimport { generateAccessToken, generateRefreshToken } from \"../../utils/token\";\nexport default (async (req, res) => {\n  if (req.method === \"POST\") {\n    try {\n      const {\n        name,\n        email,\n        password,\n        remember,\n        phone,\n        username,\n        department\n      } = req.body;\n      await dbConnect();\n      const userExists = await User.findOne({\n        $or: [{\n          username: username\n        }, {\n          email: email\n        }]\n      });\n\n      if (!userExists) {\n        const user = new User({\n          name,\n          username,\n          password,\n          email,\n          phone,\n          department\n        });\n        user.save();\n        const accessToken = generateAccessToken({\n          sub: user._id\n        });\n        const refreshToken = generateRefreshToken({\n          sub: user._id\n        });\n\n        if (remember) {\n          setTokenCookie(res, refreshToken);\n          res.json({\n            accessToken\n          });\n        } else {\n          res.json({\n            accessToken,\n            refreshToken\n          });\n        }\n      } else {\n        res.status(403).json(\"User already exists\");\n      }\n    } catch (error) {\n      console.log(error.message);\n      res.status(500).end(\"Something went wrong\");\n    }\n  }\n});","map":{"version":3,"sources":["/home/jaybarnes/Desktop/Projects/forum/frontend/pages/api/register.ts"],"names":["dbConnect","User","setTokenCookie","generateAccessToken","generateRefreshToken","req","res","method","name","email","password","remember","phone","username","department","body","userExists","findOne","$or","user","save","accessToken","sub","_id","refreshToken","json","status","error","console","log","message","end"],"mappings":"AACA,OAAOA,SAAP,MAAsB,iBAAtB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,SAASC,mBAAT,EAA8BC,oBAA9B,QAA0D,mBAA1D;AAEA,gBAAe,OAAOC,GAAP,EAA4BC,GAA5B,KAAqD;AAClE,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB,QAAI;AACF,YAAM;AACJC,QAAAA,IADI;AAEJC,QAAAA,KAFI;AAGJC,QAAAA,QAHI;AAIJC,QAAAA,QAJI;AAKJC,QAAAA,KALI;AAMJC,QAAAA,QANI;AAOJC,QAAAA;AAPI,UAQFT,GAAG,CAACU,IARR;AASA,YAAMf,SAAS,EAAf;AAEA,YAAMgB,UAAU,GAAG,MAAMf,IAAI,CAACgB,OAAL,CAAa;AACpCC,QAAAA,GAAG,EAAE,CAAC;AAAEL,UAAAA,QAAQ,EAAEA;AAAZ,SAAD,EAAyB;AAAEJ,UAAAA,KAAK,EAAEA;AAAT,SAAzB;AAD+B,OAAb,CAAzB;;AAIA,UAAI,CAACO,UAAL,EAAiB;AACf,cAAMG,IAAI,GAAG,IAAIlB,IAAJ,CAAS;AACpBO,UAAAA,IADoB;AAEpBK,UAAAA,QAFoB;AAGpBH,UAAAA,QAHoB;AAIpBD,UAAAA,KAJoB;AAKpBG,UAAAA,KALoB;AAMpBE,UAAAA;AANoB,SAAT,CAAb;AASAK,QAAAA,IAAI,CAACC,IAAL;AAEA,cAAMC,WAAW,GAAGlB,mBAAmB,CAAC;AAAEmB,UAAAA,GAAG,EAAEH,IAAI,CAACI;AAAZ,SAAD,CAAvC;AACA,cAAMC,YAAY,GAAGpB,oBAAoB,CAAC;AAAEkB,UAAAA,GAAG,EAAEH,IAAI,CAACI;AAAZ,SAAD,CAAzC;;AAEA,YAAIZ,QAAJ,EAAc;AACZT,UAAAA,cAAc,CAACI,GAAD,EAAMkB,YAAN,CAAd;AACAlB,UAAAA,GAAG,CAACmB,IAAJ,CAAS;AAAEJ,YAAAA;AAAF,WAAT;AACD,SAHD,MAGO;AACLf,UAAAA,GAAG,CAACmB,IAAJ,CAAS;AAAEJ,YAAAA,WAAF;AAAeG,YAAAA;AAAf,WAAT;AACD;AACF,OArBD,MAqBO;AACLlB,QAAAA,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB,qBAArB;AACD;AACF,KAxCD,CAwCE,OAAOE,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACAxB,MAAAA,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBK,GAAhB,CAAoB,sBAApB;AACD;AACF;AACF,CA/CD","sourcesContent":["import { NextApiRequest, NextApiResponse } from \"next\";\nimport dbConnect from \"../../lib/mongo\";\nimport User from \"../../models/User\";\nimport { setTokenCookie } from \"../../utils/auth-cookie\";\nimport { generateAccessToken, generateRefreshToken } from \"../../utils/token\";\n\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\n  if (req.method === \"POST\") {\n    try {\n      const {\n        name,\n        email,\n        password,\n        remember,\n        phone,\n        username,\n        department,\n      } = req.body;\n      await dbConnect();\n\n      const userExists = await User.findOne({\n        $or: [{ username: username }, { email: email }],\n      });\n\n      if (!userExists) {\n        const user = new User({\n          name,\n          username,\n          password,\n          email,\n          phone,\n          department,\n        });\n\n        user.save();\n\n        const accessToken = generateAccessToken({ sub: user._id });\n        const refreshToken = generateRefreshToken({ sub: user._id });\n\n        if (remember) {\n          setTokenCookie(res, refreshToken);\n          res.json({ accessToken });\n        } else {\n          res.json({ accessToken, refreshToken });\n        }\n      } else {\n        res.status(403).json(\"User already exists\");\n      }\n    } catch (error) {\n      console.log(error.message);\n      res.status(500).end(\"Something went wrong\");\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}