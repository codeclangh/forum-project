{"ast":null,"code":"import dbConnect from \"../../lib/mongo\";\nimport User from \"../../models/User\";\nimport getUserID from \"../../utils/get-userID\";\nexport default (async (req, res) => {\n  try {\n    await dbConnect();\n    const token = req.headers.authorization.split(\" \")[1];\n    const userID = getUserID(token);\n    if (!userID) return res.status(401).end(\"Unauthorized!\");\n    const user = await User.findById(userID);\n    if (!user) return res.status(400).end(\"User not found\");\n    res.json(user);\n  } catch (error) {\n    console.log(error);\n    res.status(500).end(\"Something went wrong\");\n  }\n});","map":{"version":3,"sources":["/home/jaybarnes/Desktop/Projects/forum/frontend/pages/api/user.ts"],"names":["dbConnect","User","getUserID","req","res","token","headers","authorization","split","userID","status","end","user","findById","json","error","console","log"],"mappings":"AACA,OAAOA,SAAP,MAAsB,iBAAtB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AAEA,gBAAe,OAAOC,GAAP,EAA4BC,GAA5B,KAAqD;AAClE,MAAI;AACF,UAAMJ,SAAS,EAAf;AAEA,UAAMK,KAAK,GAAGF,GAAG,CAACG,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAd;AAEA,UAAMC,MAAM,GAAGP,SAAS,CAACG,KAAD,CAAxB;AACA,QAAI,CAACI,MAAL,EAAa,OAAOL,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,CAAoB,eAApB,CAAP;AAEb,UAAMC,IAAI,GAAG,MAAMX,IAAI,CAACY,QAAL,CAAcJ,MAAd,CAAnB;AAEA,QAAI,CAACG,IAAL,EAAW,OAAOR,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,CAAoB,gBAApB,CAAP;AAEXP,IAAAA,GAAG,CAACU,IAAJ,CAASF,IAAT;AACD,GAbD,CAaE,OAAOG,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAX,IAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,CAAoB,sBAApB;AACD;AACF,CAlBD","sourcesContent":["import { NextApiRequest, NextApiResponse } from \"next\";\nimport dbConnect from \"../../lib/mongo\";\nimport User from \"../../models/User\";\nimport getUserID from \"../../utils/get-userID\";\n\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\n  try {\n    await dbConnect();\n\n    const token = req.headers.authorization.split(\" \")[1];\n\n    const userID = getUserID(token);\n    if (!userID) return res.status(401).end(\"Unauthorized!\");\n\n    const user = await User.findById(userID);\n\n    if (!user) return res.status(400).end(\"User not found\");\n\n    res.json(user);\n  } catch (error) {\n    console.log(error);\n    res.status(500).end(\"Something went wrong\");\n  }\n};\n"]},"metadata":{},"sourceType":"module"}