{"ast":null,"code":"import _regeneratorRuntime from \"/home/jaybarnes/Desktop/Projects/forum/frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jaybarnes/Desktop/Projects/forum/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nimport jwtDecode from \"jwt-decode\";\nimport { getAccessToken, setAccessToken } from \"../token\";\nexport var getNewToken = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var expiredToken, _yield$axios$post, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            expiredToken = sessionStorage.getItem(\"token\");\n            _context.next = 3;\n            return axios.post(\"/api/refresh-token\", {\n              token: expiredToken,\n              headers: {\n                withCredentials: true\n              }\n            });\n\n          case 3:\n            _yield$axios$post = _context.sent;\n            data = _yield$axios$post.data;\n            setAccessToken(data.accessToken);\n            return _context.abrupt(\"return\", data.accessToken);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getNewToken() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar makeSecuredRequest = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url) {\n    var method,\n        body,\n        token,\n        _jwtDecode,\n        exp,\n        _yield$axios,\n        data,\n        _args2 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            method = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : \"GET\";\n            body = _args2.length > 2 ? _args2[2] : undefined;\n            token = getAccessToken(); // Fetch new token if token is undefined\n\n            if (token) {\n              _context2.next = 9;\n              break;\n            }\n\n            _context2.next = 6;\n            return getNewToken();\n\n          case 6:\n            token = _context2.sent;\n            _context2.next = 14;\n            break;\n\n          case 9:\n            _jwtDecode = jwtDecode(token), exp = _jwtDecode.exp;\n\n            if (!(Date.now() >= exp * 1000)) {\n              _context2.next = 14;\n              break;\n            }\n\n            _context2.next = 13;\n            return getNewToken();\n\n          case 13:\n            token = _context2.sent;\n\n          case 14:\n            _context2.next = 16;\n            return axios({\n              method: method,\n              data: body,\n              url: url,\n              headers: {\n                authorization: \"Bearer \".concat(token)\n              }\n            });\n\n          case 16:\n            _yield$axios = _context2.sent;\n            data = _yield$axios.data;\n            return _context2.abrupt(\"return\", data);\n\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function makeSecuredRequest(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default makeSecuredRequest;","map":{"version":3,"sources":["/home/jaybarnes/Desktop/Projects/forum/frontend/utils/makeSecuredRequest.ts"],"names":["axios","jwtDecode","getAccessToken","setAccessToken","getNewToken","expiredToken","sessionStorage","getItem","post","token","headers","withCredentials","data","accessToken","makeSecuredRequest","url","method","body","exp","Date","now","authorization"],"mappings":";;AAAA,OAAOA,KAAP,MAA0C,OAA1C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,UAA/C;AAEA,OAAO,IAAMC,WAAW;AAAA,sEAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AACnBC,YAAAA,YADmB,GACJC,cAAc,CAACC,OAAf,CAAuB,OAAvB,CADI;AAAA;AAAA,mBAGFP,KAAK,CAACQ,IAAN,CAAW,oBAAX,EAAiC;AACtDC,cAAAA,KAAK,EAAEJ,YAD+C;AAEtDK,cAAAA,OAAO,EAAE;AACPC,gBAAAA,eAAe,EAAE;AADV;AAF6C,aAAjC,CAHE;;AAAA;AAAA;AAGjBC,YAAAA,IAHiB,qBAGjBA,IAHiB;AAUzBT,YAAAA,cAAc,CAACS,IAAI,CAACC,WAAN,CAAd;AAVyB,6CAYlBD,IAAI,CAACC,WAZa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXT,WAAW;AAAA;AAAA;AAAA,GAAjB;;AAeP,IAAMU,kBAAkB;AAAA,uEAAG,kBACzBC,GADyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEzBC,YAAAA,MAFyB,8DAEc,KAFd;AAGzBC,YAAAA,IAHyB;AAKrBR,YAAAA,KALqB,GAKbP,cAAc,EALD,EAOzB;;AAPyB,gBAQpBO,KARoB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBASTL,WAAW,EATF;;AAAA;AASvBK,YAAAA,KATuB;AAAA;AAAA;;AAAA;AAAA,yBAWFR,SAAS,CAACQ,KAAD,CAXP,EAWfS,GAXe,cAWfA,GAXe;;AAAA,kBAanBC,IAAI,CAACC,GAAL,MAAcF,GAAG,GAAG,IAbD;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAcPd,WAAW,EAdJ;;AAAA;AAcrBK,YAAAA,KAdqB;;AAAA;AAAA;AAAA,mBAkBFT,KAAK,CAAC;AAC3BgB,cAAAA,MAAM,EAANA,MAD2B;AAE3BJ,cAAAA,IAAI,EAAEK,IAFqB;AAG3BF,cAAAA,GAAG,EAAHA,GAH2B;AAI3BL,cAAAA,OAAO,EAAE;AACPW,gBAAAA,aAAa,mBAAYZ,KAAZ;AADN;AAJkB,aAAD,CAlBH;;AAAA;AAAA;AAkBjBG,YAAAA,IAlBiB,gBAkBjBA,IAlBiB;AAAA,8CA2BlBA,IA3BkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAlBE,kBAAkB;AAAA;AAAA;AAAA,GAAxB;;AA8BA,eAAeA,kBAAf","sourcesContent":["import axios, { AxiosRequestConfig } from \"axios\";\nimport jwtDecode from \"jwt-decode\";\nimport { getAccessToken, setAccessToken } from \"../token\";\n\nexport const getNewToken = async () => {\n  const expiredToken = sessionStorage.getItem(\"token\");\n\n  const { data } = await axios.post(\"/api/refresh-token\", {\n    token: expiredToken,\n    headers: {\n      withCredentials: true,\n    },\n  });\n\n  setAccessToken(data.accessToken);\n\n  return data.accessToken;\n};\n\nconst makeSecuredRequest = async (\n  url: string,\n  method: AxiosRequestConfig[\"method\"] = \"GET\",\n  body?: Record<string, any>\n) => {\n  let token = getAccessToken();\n\n  // Fetch new token if token is undefined\n  if (!token) {\n    token = await getNewToken();\n  } else {\n    const { exp }: any = jwtDecode(token);\n\n    if (Date.now() >= exp * 1000) {\n      token = await getNewToken();\n    }\n  }\n\n  const { data } = await axios({\n    method,\n    data: body,\n    url,\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  });\n\n  return data;\n};\n\nexport default makeSecuredRequest;\n"]},"metadata":{},"sourceType":"module"}