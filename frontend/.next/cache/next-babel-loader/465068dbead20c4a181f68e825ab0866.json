{"ast":null,"code":"import { verify } from \"jsonwebtoken\";\nimport { getTokenCookie, setTokenCookie } from \"../../utils/auth-cookie\";\nimport { generateAccessToken, generateRefreshToken } from \"../../utils/token\";\nexport default (async (req, res) => {\n  if (req.method === \"POST\") {\n    try {\n      // If refresh-token is sent from the front-end,\n      // it means user signed in for one-time authentication\n      const oneTime = Boolean(req.body.token);\n      const refreshToken = req.body.token || getTokenCookie(req);\n      if (!refreshToken) return res.status(401).end(\"Invalid Token\");\n      const payload = verify(refreshToken, process.env.REFRESH_SECRET);\n      if (!payload) return res.status(403).end(\"Invalid Token\");\n      const accessToken = generateAccessToken({\n        sub: payload.sub\n      });\n      !oneTime && setTokenCookie(res, generateRefreshToken({\n        sub: payload.sub\n      }));\n      res.json({\n        accessToken\n      });\n    } catch (err) {\n      console.log(err);\n      res.status(500).end(\"Something went wrong\");\n    }\n  }\n});","map":{"version":3,"sources":["/home/jaybarnes/Desktop/Projects/forum/frontend/pages/api/refresh-token.ts"],"names":["verify","getTokenCookie","setTokenCookie","generateAccessToken","generateRefreshToken","req","res","method","oneTime","Boolean","body","token","refreshToken","status","end","payload","process","env","REFRESH_SECRET","accessToken","sub","json","err","console","log"],"mappings":"AACA,SAASA,MAAT,QAAuB,cAAvB;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,yBAA/C;AACA,SAASC,mBAAT,EAA8BC,oBAA9B,QAA0D,mBAA1D;AAMA,gBAAe,OACbC,GADa,EAEbC,GAFa,KAGV;AACH,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB,QAAI;AACF;AACA;AACA,YAAMC,OAAO,GAAGC,OAAO,CAACJ,GAAG,CAACK,IAAJ,CAASC,KAAV,CAAvB;AAEA,YAAMC,YAAY,GAAGP,GAAG,CAACK,IAAJ,CAASC,KAAT,IAAkBV,cAAc,CAACI,GAAD,CAArD;AACA,UAAI,CAACO,YAAL,EAAmB,OAAON,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,CAAoB,eAApB,CAAP;AAEnB,YAAMC,OAAY,GAAGf,MAAM,CAACY,YAAD,EAAeI,OAAO,CAACC,GAAR,CAAYC,cAA3B,CAA3B;AACA,UAAI,CAACH,OAAL,EAAc,OAAOT,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,CAAoB,eAApB,CAAP;AAEd,YAAMK,WAAW,GAAGhB,mBAAmB,CAAC;AAAEiB,QAAAA,GAAG,EAAEL,OAAO,CAACK;AAAf,OAAD,CAAvC;AACA,OAACZ,OAAD,IACEN,cAAc,CAACI,GAAD,EAAMF,oBAAoB,CAAC;AAAEgB,QAAAA,GAAG,EAAEL,OAAO,CAACK;AAAf,OAAD,CAA1B,CADhB;AAGAd,MAAAA,GAAG,CAACe,IAAJ,CAAS;AAAEF,QAAAA;AAAF,OAAT;AACD,KAhBD,CAgBE,OAAOG,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAhB,MAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,CAAoB,sBAApB;AACD;AACF;AACF,CA1BD","sourcesContent":["import { NextApiRequest, NextApiResponse } from \"next\";\nimport { verify } from \"jsonwebtoken\";\nimport { getTokenCookie, setTokenCookie } from \"../../utils/auth-cookie\";\nimport { generateAccessToken, generateRefreshToken } from \"../../utils/token\";\n\ninterface IData {\n  accessToken: string;\n}\n\nexport default async (\n  req: NextApiRequest,\n  res: NextApiResponse<IData | string>\n) => {\n  if (req.method === \"POST\") {\n    try {\n      // If refresh-token is sent from the front-end,\n      // it means user signed in for one-time authentication\n      const oneTime = Boolean(req.body.token);\n\n      const refreshToken = req.body.token || getTokenCookie(req);\n      if (!refreshToken) return res.status(401).end(\"Invalid Token\");\n\n      const payload: any = verify(refreshToken, process.env.REFRESH_SECRET);\n      if (!payload) return res.status(403).end(\"Invalid Token\");\n\n      const accessToken = generateAccessToken({ sub: payload.sub });\n      !oneTime &&\n        setTokenCookie(res, generateRefreshToken({ sub: payload.sub }));\n\n      res.json({ accessToken });\n    } catch (err) {\n      console.log(err);\n      res.status(500).end(\"Something went wrong\");\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}